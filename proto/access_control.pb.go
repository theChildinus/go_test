// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/access_control.proto

package access_control

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AccessControlReq struct {
	Sub                  string   `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Obj                  string   `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Act                  string   `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessControlReq) Reset()         { *m = AccessControlReq{} }
func (m *AccessControlReq) String() string { return proto.CompactTextString(m) }
func (*AccessControlReq) ProtoMessage()    {}
func (*AccessControlReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe87c01588b1ab0e, []int{0}
}

func (m *AccessControlReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlReq.Unmarshal(m, b)
}
func (m *AccessControlReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlReq.Marshal(b, m, deterministic)
}
func (m *AccessControlReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlReq.Merge(m, src)
}
func (m *AccessControlReq) XXX_Size() int {
	return xxx_messageInfo_AccessControlReq.Size(m)
}
func (m *AccessControlReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlReq.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlReq proto.InternalMessageInfo

func (m *AccessControlReq) GetSub() string {
	if m != nil {
		return m.Sub
	}
	return ""
}

func (m *AccessControlReq) GetObj() string {
	if m != nil {
		return m.Obj
	}
	return ""
}

func (m *AccessControlReq) GetAct() string {
	if m != nil {
		return m.Act
	}
	return ""
}

type AccessControlResp struct {
	Res                  bool     `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccessControlResp) Reset()         { *m = AccessControlResp{} }
func (m *AccessControlResp) String() string { return proto.CompactTextString(m) }
func (*AccessControlResp) ProtoMessage()    {}
func (*AccessControlResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe87c01588b1ab0e, []int{1}
}

func (m *AccessControlResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlResp.Unmarshal(m, b)
}
func (m *AccessControlResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlResp.Marshal(b, m, deterministic)
}
func (m *AccessControlResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlResp.Merge(m, src)
}
func (m *AccessControlResp) XXX_Size() int {
	return xxx_messageInfo_AccessControlResp.Size(m)
}
func (m *AccessControlResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlResp.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlResp proto.InternalMessageInfo

func (m *AccessControlResp) GetRes() bool {
	if m != nil {
		return m.Res
	}
	return false
}

type StringMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringMessage) Reset()         { *m = StringMessage{} }
func (m *StringMessage) String() string { return proto.CompactTextString(m) }
func (*StringMessage) ProtoMessage()    {}
func (*StringMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe87c01588b1ab0e, []int{2}
}

func (m *StringMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMessage.Unmarshal(m, b)
}
func (m *StringMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMessage.Marshal(b, m, deterministic)
}
func (m *StringMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMessage.Merge(m, src)
}
func (m *StringMessage) XXX_Size() int {
	return xxx_messageInfo_StringMessage.Size(m)
}
func (m *StringMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StringMessage proto.InternalMessageInfo

func (m *StringMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*AccessControlReq)(nil), "AccessControlReq")
	proto.RegisterType((*AccessControlResp)(nil), "AccessControlResp")
	proto.RegisterType((*StringMessage)(nil), "StringMessage")
}

func init() { proto.RegisterFile("proto/access_control.proto", fileDescriptor_fe87c01588b1ab0e) }

var fileDescriptor_fe87c01588b1ab0e = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0xe9, 0x8c, 0x23, 0xfa, 0xc3, 0xc8, 0x4c, 0x50, 0x28, 0xd5, 0x85, 0x04, 0x06, 0xc4,
	0x45, 0x82, 0xba, 0x73, 0x27, 0x45, 0x70, 0xe3, 0xa6, 0x1e, 0x40, 0xfe, 0x86, 0x9f, 0xb6, 0x63,
	0xcd, 0x5f, 0x9b, 0xcc, 0xe0, 0x5a, 0xbc, 0x81, 0x47, 0xf3, 0x0a, 0x1e, 0x44, 0xd2, 0xb8, 0x99,
	0xba, 0x7b, 0xef, 0x4b, 0xde, 0x7b, 0x21, 0x90, 0x75, 0x3d, 0x7b, 0xd6, 0x68, 0x0c, 0x39, 0xf7,
	0x6c, 0xd8, 0xfa, 0x9e, 0x5b, 0x35, 0xc0, 0xec, 0xac, 0x62, 0xae, 0x5a, 0xd2, 0xd8, 0x35, 0x1a,
	0xad, 0x65, 0x8f, 0xbe, 0x61, 0xeb, 0xe2, 0xa9, 0x7c, 0x80, 0xc5, 0xdd, 0x90, 0xca, 0x63, 0xa8,
	0xa0, 0x37, 0xb1, 0x80, 0xa9, 0xdb, 0x94, 0x69, 0x72, 0x9e, 0x5c, 0x1c, 0x16, 0x41, 0x06, 0xc2,
	0xe5, 0x3a, 0x9d, 0x44, 0xc2, 0xe5, 0x3a, 0x10, 0x34, 0x3e, 0x9d, 0x46, 0x82, 0xc6, 0xcb, 0x15,
	0x2c, 0x47, 0x4d, 0xae, 0x0b, 0xd7, 0x7a, 0x72, 0x43, 0xd5, 0x41, 0x11, 0xa4, 0x5c, 0xc1, 0xfc,
	0xc9, 0xf7, 0x8d, 0xad, 0x1e, 0xc9, 0x39, 0xac, 0x48, 0x1c, 0xc3, 0x6c, 0x8b, 0xed, 0x86, 0xfe,
	0xf6, 0xa2, 0xb9, 0xfe, 0x4c, 0x60, 0xbe, 0x53, 0x27, 0x14, 0xcc, 0xf2, 0x9a, 0xcc, 0x8b, 0x58,
	0xaa, 0xf1, 0x8b, 0x33, 0xa1, 0xfe, 0x4f, 0xe7, 0xb0, 0x77, 0x6f, 0x6a, 0x16, 0x47, 0x6a, 0x67,
	0x2f, 0x1b, 0x79, 0x79, 0xfa, 0xf1, 0xfd, 0xf3, 0x35, 0x39, 0x91, 0x0b, 0xbd, 0xbd, 0xd2, 0xf4,
	0x8e, 0xaf, 0x5d, 0x4b, 0x9a, 0x4c, 0xcd, 0xb7, 0xc9, 0x65, 0xb9, 0x3f, 0xfc, 0xd2, 0xcd, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xfc, 0x3a, 0x49, 0x61, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessControlClient is the client API for AccessControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessControlClient interface {
	Check(ctx context.Context, in *AccessControlReq, opts ...grpc.CallOption) (*AccessControlResp, error)
	Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type accessControlClient struct {
	cc *grpc.ClientConn
}

func NewAccessControlClient(cc *grpc.ClientConn) AccessControlClient {
	return &accessControlClient{cc}
}

func (c *accessControlClient) Check(ctx context.Context, in *AccessControlReq, opts ...grpc.CallOption) (*AccessControlResp, error) {
	out := new(AccessControlResp)
	err := c.cc.Invoke(ctx, "/AccessControl/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) Echo(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/AccessControl/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlServer is the server API for AccessControl service.
type AccessControlServer interface {
	Check(context.Context, *AccessControlReq) (*AccessControlResp, error)
	Echo(context.Context, *StringMessage) (*StringMessage, error)
}

// UnimplementedAccessControlServer can be embedded to have forward compatible implementations.
type UnimplementedAccessControlServer struct {
}

func (*UnimplementedAccessControlServer) Check(ctx context.Context, req *AccessControlReq) (*AccessControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedAccessControlServer) Echo(ctx context.Context, req *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterAccessControlServer(s *grpc.Server, srv AccessControlServer) {
	s.RegisterService(&_AccessControl_serviceDesc, srv)
}

func _AccessControl_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessControl/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).Check(ctx, req.(*AccessControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessControl/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).Echo(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AccessControl",
	HandlerType: (*AccessControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _AccessControl_Check_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _AccessControl_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/access_control.proto",
}
